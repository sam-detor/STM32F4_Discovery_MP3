How to use the offloading framework v2:
1. Put all your code that you would like to offload in a method called offloadedCode with the following method signature:
                       int __attribute__((section(".text.offloaded"))) offloadedCode(void)

2. Call the method remoteInit in place of where you would call offloadedCode. remoteInit takes two arguments (USART_TypeDef* USARTx and volatile uint32_t* systick_ms).
   USARTx should be a pointer to a properly initialized USART_TypeDef object and systick_ms should be a uint32_t pointer to a variable that is incremented every ms. 
   The USART_TypeDef is defined in stm32f4xx.h

3. Call the method remoteInitSVC at the begining of your SVC_Handler method

4. Declare the offloadedCode, remoteInit, and remoteInitSVC methods in the relevant places

5. Fill in the following #defines in RemoteInit.h file (all of the following values are in bytes):
    a. RAM_START --> The RAM start address on your board
    b. RAM_SIZE --> The size of writeable RAM on your board
    c. RAM_STACK_SIZE --> how large of a stack does your RAM code need (also must be written in hex)
    d. WORD_SIZE --> how big are the words for you MCU, default is 4, should work for most people
    e. BAUD_RATE --> Baude rate your UART connection is configured to
    f. DEVICE_FILE --> Path to the device file of your UART connection on the PC
    g. BIN_FILE --> Path to where the initialization binary will be, the name of the binary must be InitCode.bin in this path
    h. COMMS_TIMEOUT --> Timeout in ms for UART comms methods

6. Add the following flags to your normal compile/link process: -ffunction-sections -Wl,--gc-section -Wl,
   This makes sure that methods that are not called will not appear in the final binary  

7. Make the remoteInitBoard library by running "make remoteInitBoard"

8. Make your code normally (but don't forget the extra flags from step 7) and link the remoteInitBoard as you would any other static lib

9. Run the spinUpLdScript.py script in the Offloading folder as shown below, giving it a path to the elf file of your recently compiled code:
         python3 spinUpLdScript <path-to-elf-file-of-compiled-code>
   *note this script requires a library called "pyelftools", install if not already

   This will generate the custom linker script needed to create the ini binary

10. Now compile and link your as you normally would, but use the initBinStartUp.s file instead of your usual startup file and use the InitCode.ld
   linker script generated by the script in the previous step. Name the output file InitCode.bin
   and make sure the BIN_FILE #define in RemoteInit.h leads to your InitCode.bin file. This is your offloaded code binary.

11. Make and run (in the background) the code that will send the InitCode.bin to the board by running "make remoteInitPC"

12. Flash your board, and your program will run normally




